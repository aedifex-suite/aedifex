import { ipcRenderer } from 'electron'
import YAMLFile from '../models/YAMLFile'
import { BestiaryEntrySchema } from '../schemata/BestiaryEntrySchema'
import * as fs from 'fs'
import * as path from 'path'
import { remote } from 'electron'
import * as _Config from '../models/_Config'

class {
  onCreate() {
    _Config.load({
      win: {
        x: 0,
        y: 0,
        width: 1280,
        height: 720,
        fullscreen: false,
      },
      openFiles: [],
      openDir: '',
      sections: {},
    })

    this.state = {
      files: [],
      selectedFilepath: '',
      selectedID: '',
      openDir: _Config.settings.openDir,
    }

    // Add YAMLFile entries.
    YAMLFile.addSchisma('bestiary', BestiaryEntrySchema)

    // Restore files or show empty file.
    if (_Config.settings.openFiles.length > 0) {
      for (let p of _Config.settings.openFiles) {
        this.openFile(p)
      }
    } else {
      this.newFile('bestiary')
    }

    // Add hook for app closing.
    ipcRenderer.on('app-close', _ => {
      this.close()
    })

    // This always feels bad, but bind our appropriate methods to this.
    this.refreshFile = this.refreshFile.bind(this)
  }
  async close() {
    _Config.settings.openFiles = []
    _Config.settings.openDir = this.state.openDir
    for (let file of this.state.files) {
      // Attempt to close the file and bail out of program close if cancel is pressed.
      let result = await file.close()
      if (result === 'cancel') {
        return
      }
      // Otherwise store in the openFiles list.
      if (file.path !== "") {
        _Config.settings.openFiles.push(file.path)
      }
    }
    await _Config.save(true)
    ipcRenderer.send('closed')
  }
  async newFile(type) {
    let f = new YAMLFile('', type)
    await f.load()
    this.setupFile(f)
    this.state.files.push(f)
    this.state.selectedID = f.id
  }
  async openFile(p, fullPath) {
    let f = this.state.files.find(f=>f.path===p)
    if (!f) {
      f = new YAMLFile(p)
      await f.load()
      this.state.files.push(f)
      this.setupFile(f)
    }
    this.state.selectedID = f.id
    this.state.selectedFilepath = p
  }
  async closeFile(item, index) {
    let file = this.state.files.find(f=>f.id===item.id)
    if (file) {
      let result = await file.close()
      if (result === 'close') {
        if (item.id === this.state.selectedID) {
          let prev = this.state.files[index-1]
          let next = this.state.files[index+1]
          if (next) {
            this.state.selectedID = next.id
          } else if (prev) {
            this.state.selectedID = prev.id
          } else {
            this.state.selectedID = ''
          }
        }
        this.state.files = this.state.files.filter(f=>f.id!==file.id)
        this.unsetupFile(file)
      }
    }
  }
  async renameFile(item, index, value) {
    this.state.files.find(f=>f.id===item.id)?.rename(value)
  }
  setupFile(file) {
    ['change', 'undo', 'redo', 'saved', 'rename'].forEach(v=>file.on(v, this.refreshFile))
  }
  unsetupFile(file) {
    ['change', 'undo', 'redo', 'saved', 'rename'].forEach(v=>file.off(v, this.refreshFile))
  }
  refreshFile() {
    this.setStateDirty('files')
  }
  selectFile(item, index) {
    this.state.selectedID = item.id
  }
  async openFileDialog() {
    let result = remote.dialog.showOpenDialogSync({
      filters: [{
        name: 'aedifex',
        extensions: ['aedifex', 'aed']
      },
      {
        name: 'yaml',
        extensions: ['yaml', 'yml']
      }],
      title: "Open File",
      properties: ['openFile'],
    })
    if (result) {
      for (let p of result) {
        await this.openFile(p)
      }
    }
  }
  async saveFile() {
    let file = this.state.files.find(f=>f.id===this.state.selectedID)
    if (file) {
      await file.save()
    }
    console.log('save current fielel')
  }
  openDir() {
    let result = remote.dialog.showOpenDialogSync({
      title: "Open Directory",
      properties: ['openDirectory'],
    })
    if (result) {
      this.state.openDir = result[0]
    }
  }
  closeDir(e) {
    this.state.openDir = ''
  }
}

style {
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Regular.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Italic.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-Bold.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-BoldItalic.ttf');
  }
  * {
    box-sizing: border-box;
  }
  html {
    height: 100%;
  }
  body {
    background-color: (--background);
    color: var(--secondary);
    margin: 0;
    height: 100%;
    display: grid;
    grid-template-rows: auto minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
    overflow: hidden;
    font-family: 'PT Sans', sans-serif;
  }
  [draggable] {
    user-select: none;
  }
  button {
    border: 0;
    border-radius: 0;
    background: var(--input-bg);
    color: var(--input-fg);
  }
  input, select {
    background: var(--input-bg);
    color: var(--input-fg);
    border: 1px solid transparent;
    padding: .25em;
    margin: .1em;
  }
  .Main {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: auto minmax(0, 1fr);
  }
  .Main__Left {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
  .Main__Right {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
}

$ let file = state.files.find(f=>f.id===state.selectedID)
Titlebar title='aedifex'
  @menu
    div
      img src='assets/aedifex-icon.png'
    div.Titlebar__Controls__Button on-click('openDir') -- Open Dir
    div.Titlebar__Controls__Button on-click('openFileDialog') -- Open File
    div.Titlebar__Controls__Button on-click('newFile') -- New File
    div.Titlebar__Controls__Button class={'-noinput': !file?.unsaved} on-click('saveFile') -- Save File
div.Main
  div.Main__Left
    if(state.openDir)
      FolderListing dir=state.openDir on-select('openFile') on-close('closeDir') selected=file?file.path:''
    else
      div
  div.Main__Right
    Tabs tabs=state.files.map(f=>({
        id: f.id,
        title: `${f.title} ${f.unsaved?'*':''}`,
        icon: (f?f.type:'undefined')+"-icon.png",
      })) selected=state.selectedID on-select('selectFile') on-close('closeFile') on-rename('renameFile')
      FileView file=file
