import { ipcRenderer } from 'electron'
import YAMLFile from '../models/YAMLFile'
import BestiaryEntrySchema from '../schemata/BestiaryEntrySchema'
import * as fs from 'fs'
import * as path from 'path'
import { remote } from 'electron'
import * as _Config from '../models/_Config'

class {
  onCreate() {
    _Config.load({
      win: {
        x: 0,
        y: 0,
        width: 1280,
        height: 720,
        fullscreen: false,
      },
      openFiles: [],
      openDir: '',
    })

    this.state = {
      files: [],
      selectedFilepath: '',
      selectedID: '',
      openDir: _Config.settings.openDir,
    }

    // Add YAMLFile entries.
    YAMLFile.addSchisma('bestiary', BestiaryEntrySchema)

    // Restore files or show empty file.
    if (_Config.settings.openFiles.length > 0) {
      for (let p of _Config.settings.openFiles) {
        this.openFile(p)
      }
    } else {
      this.newFile('bestiary')
    }

    // Add hook for app closing.
    ipcRenderer.on('app-close', _ => {
      this.close()
    })
  }
  async close() {
    _Config.settings.openFiles = []
    _Config.settings.openDir = this.state.openDir
    for (let file of this.state.files) {
      // Attempt to close the file and bail out of program close if cancel is pressed.
      let result = await file.close()
      if (result === 'cancel') {
        return
      }
      // Otherwise store in the openFiles list.
      if (file.path !== "") {
        _Config.settings.openFiles.push(file.path)
      }
    }
    await _Config.save(true)
    ipcRenderer.send('closed')
  }
  async newFile(type) {
    let f = new YAMLFile('', type)
    await f.load()
    this.state.files.push(f)
      this.state.selectedID = f.id
  }
  async openFile(p, fullPath) {
    let f = this.state.files.find(f=>f.path===p)
    if (!f) {
      f = new YAMLFile(p)
      await f.load()
      this.state.files.push(f)
    }
    this.state.selectedID = f.id
    this.state.selectedFilepath = p
  }
  async closeFile(item, index) {
    let file = this.state.files.find(f=>f.id===item.id)
    if (file) {
      let result = await file.close()
      if (result === 'close') {
        if (item.id === this.state.selectedID) {
          let prev = this.state.files[index-1]
          let next = this.state.files[index+1]
          if (next) {
            this.state.selectedID = next.id
          } else if (prev) {
            this.state.selectedID = prev.id
          } else {
            this.state.selectedID = ''
          }
        }
        this.state.files = this.state.files.filter(f=>f.id!==file.id)
      }
    }
  }
  selectFile(item, index) {
    this.state.selectedID = item.id
  }
  openDir() {
    let [result] = remote.dialog.showOpenDialogSync({
      title: "Open Directory",
      properties: ['openDirectory'],
    })

    if (result) {
      this.state.openDir = result
    }
  }
}

style {
  :root {
    --primary: #51789d;
    --secondary: #0c1a13;
    --tertiary: #667e94;
    --quaternary: #f3e5ec;
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Regular.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Italic.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-Bold.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-BoldItalic.ttf');
  }
  * {
    box-sizing: border-box;
  }
  html {
    height: 100%;
  }
  body {
    background-color: black;
    color: var(--secondary);
    margin: 0;
    height: 100%;
    display: grid;
    grid-template-rows: auto minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
    overflow: hidden;
    font-family: 'PT Sans', sans-serif;
  }
  [draggable] {
    user-select: none;
  }
  .Main {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: auto minmax(0, 1fr);
  }
  .Main__Left {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
  .Main__Right {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
}

Titlebar title='aedifex'
  @menu
    div
      img src='assets/aedifex-icon.png'
    div.Titlebar__Controls__Button on-click('openDir') -- Open Dir
div.Main
  $ let file = state.files.find(f=>f.id===state.selectedID)
  div.Main__Left
    if(state.openDir)
      FolderListing dir=state.openDir on-select('openFile') selected=file?file.path:''
    else
      div
  div.Main__Right
    Tabs tabs=state.files.map(f=>({
        id: f.id,
        title: f.title,
        icon: (file?file.type:'undefined')+"-icon.png",
      })) selected=state.selectedID on-select('selectFile') on-close('closeFile')
      FileView file=file
