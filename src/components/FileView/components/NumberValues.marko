class {
  onCreate() {
    this.state = {
      expanded: false,
      y: 0, width: 0,
    }
  }
  onChange(e) {
    this.emit('change', e)
  }
  onExtraChange(e) {
  }
  expand() {
    let t = this.getEl('base')
    let b = t.getBoundingClientRect()
    this.state.x = b.x
    this.state.y = b.height
    this.state.width = b.width
    this.state.expanded = !this.state.expanded
  }
}

style {
  :root {
    --number-popup-bg: #040404;
    --number-popup-fg: #b3b3b3;
    --number-popup-border: gold;
  }
  .NumberValues {
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
    grid-template-rows: minmax(0, 1fr);
    padding: .2em;
  }
  .NumberValues__label {
    min-width: 6em;
  }

  .NumberValues__inputs {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: auto minmax(0, 1fr);
  }
  .NumberValues__inputs__base {
    display: inline-flex;
  }
  .NumberValues__inputs__expansion {
    position: absolute;
    box-shadow: 0 0 3px #000;
    background: var(--number-popup-bg);
    color: var(--number-popup-fg);
  }
  .NumberValues__inputs__value {
    width: 3em;
  }
  .NumberValues__inputs__expand, .NumberValues__inputs__remove {
    border-radius: 0 .2em .2em 0;
    padding: 0;
    border: 0;
    width: .5em;
  }
  .NumberValues__inputs__group {
    margin: 0;
    padding: 1;
    font-size: 13px;
    border-style: solid;
    border-width: 1px;
  }
  .NumberValues__inputs__group__title {
    font-style: italic;
  }
}

label.NumberValues
  span.NumberValues__label -- ${input.label}
  span.NumberValues__inputs
    span.NumberValues__inputs__base key='base'
      input.NumberValues__inputs__value type='number' value=input.d[`state.${input.t}.value`] on-change('onChange')
      button.NumberValues__inputs__expand on-click('expand')
    if(state.expanded)
      div.NumberValues__inputs__expansion style={"margin-top": state.y, width: state.width }
        if(!input.noExtras)
          fieldset.NumberValues__inputs__group
            legend.NumberValues__inputs__group__title -- extras
            if(input.d[`state.${input.t}.extras`])
              for|extra| of=input.d[`state.${input.t}.extras`]
                span.NumberValues__inputs__base
                  input.NumberValues__inputs__value type='number' value=extra.value on-change('onExtraChange')
                  button.NumberValues__inputs__remove -- -
            button.NumberValues__inputs__add -- +
