import * as dd from 'dot-dotty'
import { BestiaryEntrySchema, BestiaryLevelSchema } from 'schemata/BestiaryEntrySchema'

class {
  onCreate(input) {
    this.state = {
      warnings: {},
      errors: {},
    }
    this.onFileUpdate = this.onFileUpdate.bind(this)
    if (input.file) {
      input.file.on('change', this.onFileUpdate)
      input.file.on('undo', this.onFileUpdate)
      input.file.on('redo', this.onFileUpdate)
      this.dot = dd(input.file, {
        prefix: 'state.',
        throwErrors: false,
      })
    }
  }
  onDestroy() {
    if (this.input) {
      input.file.off('change', this.onFileUpdate)
      input.file.off('undo', this.onFileUpdate)
      input.file.off('redo', this.onFileUpdate)
    }
  }
  onFileUpdate() {
    this.state.errors = []
    try {
      let errs = BestiaryEntrySchema.validate(this.input.file._state)
      for (let err of errs) {
        this.state.errors[err.where] = err.message
      }
    } catch(e) {
      console.log(e)
    }
    this.forceUpdate()
  }
  updateAbilityScore(which, e) {
    let d = this.dot
    let k = `ability scores.${which}.value`
    let v = Number(e.target.value)
    if (d[k] === undefined) return
    if (v < 0) {
      this.state.errors[k] = 'cannot be less than 0'
    } else {
      delete this.state.errors[k]
    }
    d[k] = v
  }
  updateField(which, e) {
    let d = this.dot
    let k = which
    if (which === 'hitdice') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'name') {
      d[k] = e.target.value
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    }
  }
  addLevel() {
    let d = this.dot
    d['levels'].push(BestiaryLevelSchema.create({}))
  }
  updateLevelField(index, which, e) {
    let d = this.dot
    let k = `levels.${index}.${which}`
    if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'class') {
      d[k] = e.target.value
    } else if (which === 'level') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'favored') {
      d[k] = e.target.checked
    } else if (which === 'prestige') {
      d[k] = e.target.checked
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    }
  }
}

style {
  .Editor__Entry {
    display: block;
  }
  .Editor__Entry.-errors {
    background: rgba(255,0,0,0.5);
  }
  .Editor__Entry__name {
    display: inline-block;
    min-width: 7em;
  }
  .Editor__Entry__input {
  }
  .Editor__Statistics .Editor__Entry__input {
    width: 3em;
  }
  .errorable {
    position: relative;
  }
  .errorable.-error > input {
    border: 1px solid red;
  }
  .errorable:focus-within .errorable__error {
    display: block;
  }
  .errorable__error {
    display: none;
    left: 0;
    top: 100%;
    position: absolute;
    color: red;
    background: #000;
    padding: .25em;
    margin: .25em;
    opacity: 0.9;
    z-index: 1000;
  }
}

macro|{ renderBody, field }| name='errorable'
  span.errorable class=state.errors[field]?'-error':''
    <${renderBody}/>
    if(state.errors[field])
      span.errorable__error -- ${state.errors[field]}
$ let d = component.dot
section.Editor__Core
  h2 -- Core
  label.Editor__Entry
    span.Editor__Entry__name -- Name
    errorable field=`name`
      input.Editor__Entry__input value=d['name'] size=8 on-change('updateField', 'name')
  label.Editor__Entry
    span.Editor__Entry__name -- HD
    input.Editor__Entry__input type='number' value=d['hitdice'] size=4 on-change('updateField', 'hitdice')
    if(d['hitdice']>0)
      span.Editor__Entry__name -- d
      select.Editor__Entry__input name='die' id='die' on-change('updateField', 'hitpips')
        for|value| of=[4,6,8,10,12]
          option value=value selected=d['hitpips']===value -- ${value}
  label.Editor__Entry
    if(d['hitdice']>0)
      span.Editor__Entry__name -- BAB Progression
        select.Editor__Entry__input name='bab' id='bab' on-change('updateField', 'bab')
          for|value| of=[0.5,0.75,1]
            option value=value selected=d['bab']===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
  Section class="Editor__Levels" default='closed'
    @heading
      span.Editor__Levels__heading -- Levels
    @content
      div.Editor__Levels__content
        div.Editor__Levels__controls
          button.Editor__Levels__controls__button on-click('addLevel') -- +
        div.Editor__Levels__items
          if(d['levels'])
            for|level, index| of=d['levels']
              div.Editor__Levels__level
                div.Editor__Levels__level__extra title='If favored is checked, bonus hit points are given equal to the class level'
                  span.Editor__Entry__name -- Favored
                  input.Editor__Entry__input type='checkbox' checked=level.favored on-change('updateLevelField', index, 'favored')
                div.Editor__Levels__level__extra
                  span.Editor__Entry__name -- Prestige
                  input.Editor__Entry__input type='checkbox' checked=level.prestige on-change('updateLevelField', index, 'prestige')
                div.Editor__Levels__level__name
                  span.Editor__Entry__name -- Class
                  errorable field=`levels.${index}.class`
                    input.Editor__Entry__input value=level.class on-change('updateLevelField', index, 'class')
                div.Editor__Levels__level__level
                  span.Editor__Entry__name -- Level
                  input.Editor__Entry__input type='number' value=level.level size=4 on-change('updateLevelField', index, 'level')
                  div.Editor__Levels__level__hitpips
                    select.Editor__Entry__input name='die' id='die' on-change('updateLevelField', index, 'hitpips')
                      for|value| of=[4,6,8,10,12]
                        option value=value selected=level.hitpips===value -- ${value}
                div.Editor__Levels__level__bab
                  span.Editor__Entry__name -- BAB
                    select.Editor__Entry__input name='bab' id='bab' on-change('updateLevelField', index, 'bab')
                      for|value| of=[0.5,0.75,1]
                        option value=value selected=level.bab===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
Section class="Editor__Statistics" default='open'
  @heading
    span -- Statistics
  @content
    NumberValues label="Strength" d=d t="ability scores.str" on-change('updateAbilityScore', 'str')
    NumberValues label="Dexterity" d=d t="ability scores.dex" on-change('updateAbilityScore', 'dex')
    NumberValues label="Constitution" d=d t="ability scores.con" on-change('updateAbilityScore', 'con')
    NumberValues label="Wisdom" d=d t="ability scores.wis" on-change('updateAbilityScore', 'wis')
    NumberValues label="Intelligence" d=d t="ability scores.int" on-change('updateAbilityScore', 'int')
    NumberValues label="Charisma" d=d t="ability scores.cha" on-change('updateAbilityScore', 'cha')