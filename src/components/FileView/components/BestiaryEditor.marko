import * as dd from 'dot-dotty'

class {
  onCreate(input) {
    this.state = {
      warnings: {},
      errors: {},
    }
    this.onFileUpdate = this.onFileUpdate.bind(this)
    if (input.file) {
      input.file.on('change', this.onFileUpdate)
      input.file.on('undo', this.onFileUpdate)
      input.file.on('redo', this.onFileUpdate)
      this.dot = dd(input.file, {
        throwErrors: false,
      })
    }
  }
  onDestroy() {
    if (this.input) {
      input.file.off('change', this.onFileUpdate)
      input.file.off('undo', this.onFileUpdate)
      input.file.off('redo', this.onFileUpdate)
    }
  }
  onFileUpdate() {
    this.forceUpdate()
  }
  updateAbilityScore(which, e) {
    let d = this.dot
    let k = `state.ability scores.${which}`
    let v = Number(e.target.value)
    if (d[k] === undefined) return
    if (v < 0) {
      this.state.errors[k] = 'cannot be less than 0'
    } else {
      delete this.state.errors[k]
    }
    d[k] = v
  }
}

style {
  .Entry.-errors {
    background: rgba(255,0,0,0.5);
  }
}

$ let d = component.dot
section
  h2 -- Ability Scores
  label.Entry.AbilityScore class=[state.errors['state.ability scores.str']?'-errors':null]
    span -- Strength
    input type='number' value=d['state.ability scores.str'] on-change('updateAbilityScore', 'str')
  label.Entry.AbilityScore class=[state.errors['state.ability scores.dex']?'-errors':null]
    span -- Dexterity
    input type='number' value=d['state.ability scores.dex'] on-change('updateAbilityScore', 'dex')
  label.Entry.AbilityScore class=[state.errors['state.ability scores.con']?'-errors':null]
    span -- Constitution
    input type='number' value=d['state.ability scores.con'] on-change('updateAbilityScore', 'con')
