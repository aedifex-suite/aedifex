import * as dd from 'dot-dotty'
import {
  BestiaryEntrySchema,
  BestiaryLevelSchema,
  BestiaryFeatSchema,
  BestiaryFeatModifierSchema,
  BestiaryItemSchema,
  BestiaryItemWeaponSchema,
  BestiaryItemArmorSchema,
  BestiaryItemMagicItemSchema,
  BestiaryItemGoodsSchema,
  BestiaryItemWealthSchema,
  BestiaryItemModifierSchema
} from 'schemata/BestiaryEntrySchema'

class {
  onCreate(input) {
    this.state = {
      warnings: {},
      errors: {},
    }
    this.onFileUpdate = this.onFileUpdate.bind(this)
    if (input.file) {
      input.file.on('change', this.onFileUpdate)
      input.file.on('undo', this.onFileUpdate)
      input.file.on('redo', this.onFileUpdate)
      this.dot = dd(input.file, {
        prefix: 'state.',
        throwErrors: false,
      })
    }
  }
  onDestroy() {
    if (this.input && this.input.file) {
      this.input.file.off('change', this.onFileUpdate)
      this.input.file.off('undo', this.onFileUpdate)
      this.input.file.off('redo', this.onFileUpdate)
    }
  }
  onFileUpdate() {
    this.state.errors = []
    try {
      let errs = BestiaryEntrySchema.validate(this.input.file._state)
      for (let err of errs) {
        this.state.errors[err.where] = err.message
      }
    } catch(e) {
      console.log(e)
    }
    this.forceUpdate()
  }
  updateAbilityScore(which, e) {
    let d = this.dot
    let k = `ability scores.${which}.value`
    let v = Number(e.target.value)
    if (d[k] === undefined) return
    if (v < 0) {
      this.state.errors[k] = 'cannot be less than 0'
    } else {
      delete this.state.errors[k]
    }
    d[k] = v
  }
  updateField(which, e) {
    let d = this.dot
    let k = which
    if (which === 'hitdice') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'name') {
      d[k] = e.target.value
    } else if (which === 'size') {
      d[k] = e.target.value
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    } else if (which === 'alignment.moral') {
      d[k] = e.target.value
    } else if (which === 'alignment.law') {
      d[k] = e.target.value
    } else if (which === 'saves.fortitude') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.reflex') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.will') {
      d[k] = e.target.checked?'good':'bad'
    }
  }
  addLevel() {
    let d = this.dot
    d['levels'].push(BestiaryLevelSchema.create({}))
  }
  updateLevelField(index, which, e) {
    let d = this.dot
    let k = `levels.${index}.${which}`
    if (which === 'hitpips') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'class') {
      d[k] = e.target.value
    } else if (which === 'level') {
      let v = Number(e.target.value)
      if (v < 0) {
        this.state.errors[k] = 'cannot be less than 0'
        return
      } else {
        delete this.state.errors[k]
      }
      d[k] = v
    } else if (which === 'favored') {
      d[k] = e.target.checked
    } else if (which === 'prestige') {
      d[k] = e.target.checked
    } else if (which === 'bab') {
      d[k] = Number(e.target.value)
    } else if (which === 'saves.fortitude') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.reflex') {
      d[k] = e.target.checked?'good':'bad'
    } else if (which === 'saves.will') {
      d[k] = e.target.checked?'good':'bad'
    }
  }
  addFeat() {
    let d = this.dot
    d['feats'].push(BestiaryFeatSchema.create({}))
  }
  updateFeatField(index, which, e) {
    let d = this.dot
    let k = `feats.${index}.${which}`
    if (which === 'name') {
      d[k] = e.target.value
    }
  }
  addFeatModifier(index) {
    let d = this.dot
    d[`feats.${index}.modifies`].push(BestiaryFeatModifierSchema.create({}))
  }
  updateFeatModifierField(index, modIndex, which, e) {
    let d = this.dot
    let k = `feats.${index}.modifies.${modIndex}.${which}`
    if (which === 'dot') {
      d[k] = e.target.value
    } else if (which === 'value') {
      d[k] = Number(e.target.value)
    }
  }
  addItem() {
    let d = this.dot
    d['items'].push(BestiaryItemSchema.create({}))
  }
  updateItemField(index, which, e) {
    let d = this.dot
    let k = `items.${index}.${which}`
    if (which === 'name') {
      d[k] = e.target.value
    } else if (which === 'equipped') {
      d[k] = e.target.checked ? true : false
    }
  }
  addItemModifier(index) {
    let d = this.dot
    d[`items.${index}.modifies`].push(BestiaryItemModifierSchema.create({}))
  }
  updateItemModifierField(index, modIndex, which, e) {
    let d = this.dot
    let k = `items.${index}.modifies.${modIndex}.${which}`
    if (which === 'dot') {
      d[k] = e.target.value
    } else if (which === 'value') {
      d[k] = Number(e.target.value)
    }
  }
  changeItemType(index, e) {
    let d = this.dot
    let k = `items.${index}.properties`
    if (e.target.value === 'armor') {
      d[k] = BestiaryItemArmorSchema.conform(Object.assign(d[k], {type: 'armor'}))
    } else if (e.target.value === 'weapon') {
      d[k] = BestiaryItemWeaponSchema.conform(Object.assign(d[k], {type: 'weapon'}))
    } else if (e.target.value === 'magic item') {
      d[k] = BestiaryItemMagicItemSchema.conform(Object.assign(d[k], {type: 'magic item'}))
    } else if (e.target.value === 'goods') {
      d[k] = BestiaryItemGoodsSchema.conform(Object.assign(d[k], {type: 'goods'}))
    } else if (e.target.value === 'wealth') {
      d[k] = BestiaryItemWealthSchema.conform(Object.assign(d[k], {type: 'wealth'}))
    }
  }
  updateItemPropertyField(index, which, e) {
    let d = this.dot
    let k = `items.${index}.properties.${which}`
    if (which === 'attack') {
      d[k] = Number(e.target.value)
    } else if (which === 'damage') {
      d[k] = e.target.value
    } else if (which === 'equipped') {
      d[k] = e.target.checked
    } else if (which === 'enchantment') {
      d[k] = Number(e.target.value)
    }
  }
}

style {
  .Editor__Entry {
    display: block;
  }
  .Editor__Entry.-errors {
    background: rgba(255,0,0,0.5);
  }
  .Editor__Entry__name {
    display: inline-block;
    min-width: 7em;
  }
  .Editor__Entry__input {
  }
  .Editor__Statistics .Editor__Entry__input {
    width: 3em;
  }
  .errorable {
    position: relative;
  }
  .errorable.-error > input {
    border: 1px solid red;
  }
  .errorable:focus-within .errorable__error {
    display: block;
  }
  .errorable__error {
    display: none;
    left: 0;
    top: 100%;
    position: absolute;
    color: red;
    background: #000;
    padding: .25em;
    margin: .25em;
    opacity: 0.9;
    z-index: 1000;
  }
}

macro|{ renderBody, field }| name='errorable'
  span.errorable class=state.errors[field]?'-error':''
    <${renderBody}/>
    if(state.errors[field])
      span.errorable__error -- ${state.errors[field]}
$ let d = component.dot
section.Editor__Core
  h2 -- Core
  label.Editor__Entry
    span.Editor__Entry__name -- Name
    errorable field=`name`
      input.Editor__Entry__input value=d['name'] size=8 on-change('updateField', 'name')
  label.Editor__Entry
    span.Editor__Entry__name -- Size
    errorable field=`size`
      select.Editor__Entry__input name='size' id='size' on-change('updateField', 'size')
        for|value| of=['fine', 'diminutive', 'tiny', 'small', 'medium', 'large', 'huge', 'gargantuan', 'colossal']
          option value=value selected=d['size']===value -- ${value}
  label.Editor__Entry
    span.Editor__Entry__name -- Alignment
    errorable field=`alignment.law`
      select.Editor__Entry__input name='alignment.law' id='alignment.law' on-change('updateField', 'alignment.law')
        for|value| of=['lawful', 'neutral', 'chaotic']
          option value=value selected=d['alignment.law']===value -- ${value}
    errorable field=`alignment.moral`
      select.Editor__Entry__input name='alignment.moral' id='alignment.moral' on-change('updateField', 'alignment.moral')
        for|value| of=['good', 'neutral', 'evil']
          option value=value selected=d['alignment.moral']===value -- ${value}
  label.Editor__Entry
    span.Editor__Entry__name -- HD
    input.Editor__Entry__input type='number' value=d['hitdice'] size=4 on-change('updateField', 'hitdice')
    if(d['hitdice']>0)
      span.Editor__Entry__name -- d
      select.Editor__Entry__input name='die' id='die' on-change('updateField', 'hitpips')
        for|value| of=[4,6,8,10,12]
          option value=value selected=d['hitpips']===value -- ${value}
  label.Editor__Entry
    if(d['hitdice']>0)
      span.Editor__Entry__name -- BAB Progression
        select.Editor__Entry__input name='bab' id='bab' on-change('updateField', 'bab')
          for|value| of=[0.5,0.75,1]
            option value=value selected=d['bab']===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
  label.Editor__Entry
  div.Editor__Levels__level__saves
    span.Editor__Entry__name -- Good Saves
    label.Editor__Entry__label
      span.Editor__Entry__label -- Fortitude
      input.Editor__Entry__input type='checkbox' checked=d['saves.fortitude']==='good' on-change('updateField', 'saves.fortitude')
    label.Editor__Entry__label
      span.Editor__Entry__label -- Reflex
      input.Editor__Entry__input type='checkbox' checked=d['saves.reflex']==='good' on-change('updateField', 'saves.reflex')
    label.Editor__Entry__label
      span.Editor__Entry__label -- Will
      input.Editor__Entry__input type='checkbox' checked=d['saves.will']==='good' on-change('updateField', 'saves.will')
  Section class="Editor__Levels" default='closed'
    @heading
      span.Editor__Levels__heading -- Levels
    @content
      div.Editor__Levels__content
        div.Editor__Levels__controls
          button.Editor__Levels__controls__button on-click('addLevel') -- +
        div.Editor__Levels__items
          if(d['levels'])
            for|level, index| of=d['levels']
              div.Editor__Levels__level
                div.Editor__Levels__level__extra title='If favored is checked, bonus hit points are given equal to the class level'
                  span.Editor__Entry__name -- Favored
                  input.Editor__Entry__input type='checkbox' checked=level.favored on-change('updateLevelField', index, 'favored')
                div.Editor__Levels__level__extra
                  span.Editor__Entry__name -- Prestige
                  input.Editor__Entry__input type='checkbox' checked=level.prestige on-change('updateLevelField', index, 'prestige')
                div.Editor__Levels__level__name
                  span.Editor__Entry__name -- Class
                  errorable field=`levels.${index}.class`
                    input.Editor__Entry__input value=level.class on-change('updateLevelField', index, 'class')
                div.Editor__Levels__level__level
                  span.Editor__Entry__name -- Level
                  input.Editor__Entry__input type='number' value=level.level size=4 on-change('updateLevelField', index, 'level')
                  div.Editor__Levels__level__hitpips
                    select.Editor__Entry__input name='die' id='die' on-change('updateLevelField', index, 'hitpips')
                      for|value| of=[4,6,8,10,12]
                        option value=value selected=level.hitpips===value -- ${value}
                div.Editor__Levels__level__bab
                  span.Editor__Entry__name -- BAB
                    select.Editor__Entry__input name='bab' id='bab' on-change('updateLevelField', index, 'bab')
                      for|value| of=[0.5,0.75,1]
                        option value=value selected=level.bab===value -- ${value===0.5?'slow':value===0.75?'medium':'fast'}
                div.Editor__Levels__level__saves
                  span.Editor__Entry__name -- Good Saves
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Fortitude
                    input.Editor__Entry__input type='checkbox' checked=level.saves.fortitude==='good' on-change('updateLevelField', index, 'saves.fortitude')
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Reflex
                    input.Editor__Entry__input type='checkbox' checked=level.saves.reflex==='good' on-change('updateLevelField', index, 'saves.reflex')
                  label.Editor__Entry__label
                    span.Editor__Entry__label -- Will
                    input.Editor__Entry__input type='checkbox' checked=level.saves.will==='good' on-change('updateLevelField', index, 'saves.will')
Section class="Editor__Statistics" default='open'
  @heading
    span -- Statistics
  @content
    NumberValues label="Strength" d=d t="ability scores.str" on-change('updateAbilityScore', 'str')
    NumberValues label="Dexterity" d=d t="ability scores.dex" on-change('updateAbilityScore', 'dex')
    NumberValues label="Constitution" d=d t="ability scores.con" on-change('updateAbilityScore', 'con')
    NumberValues label="Wisdom" d=d t="ability scores.wis" on-change('updateAbilityScore', 'wis')
    NumberValues label="Intelligence" d=d t="ability scores.int" on-change('updateAbilityScore', 'int')
    NumberValues label="Charisma" d=d t="ability scores.cha" on-change('updateAbilityScore', 'cha')
Section class="Editor__Feats" default='open'
  @heading
    span -- Feats
  @content
    div.Editor__Feats__content
      div.Editor__Feats__controls
        button.Editor__Feats__controls__button on-click('addFeat') -- add feat
      div.Editor__Feats__items
        for|feat, index| of=d['feats']
          div.Editor__Feats__item
            div.Editor__Feats__item__name
              span.Editor__Entry__name -- Name
              errorable field=`feats.${index}.name`
                input.Editor__Entry__input value=feat.name on-change('updateFeatField', index, 'name')
            div.Editor__Feats__item__modifiers
              button.Editor__Feats__item__modifier__add on-click('addFeatModifier', index) -- add modifier
              for|modifier, modIndex| of=feat.modifies
                div.Editor__Feats__item__modifier
                  label.Editor__Feats__item__modifier__dot
                    span.Editor__Entry__name -- Target
                    errorable field=`feats.${index}.modifies.${modIndex}.dot`
                      input.Editor__Entry__input list='feat-target-fields' value=modifier.dot on-change('updateFeatModifierField', index, modIndex, 'dot')
                  label.Editor__Feats__item__modifier__value
                    span.Editor__Entry__name -- Value
                    input.Editor__Entry__input type='number' value=modifier.value size=4 on-change('updateFeatModifierField', index, modIndex, 'value')
datalist id='feat-target-fields'
  for|key,value| in={str: 'Strength', dex: 'Dexterity', con: 'Constitution', int: 'Intelligence', wis: 'Wisdom', cha: 'Charisma'}
    option value=`ability scores.${key}` -- ${value}
  for|value| of=['fortitude', 'reflex', 'will']
    option value=`saves.${value}` -- ${value[0].toUpperCase()+value.slice(1)}
  option value='hp' -- HP
  option value='attack' -- Attack
  option value='ac' -- AC
  option value='cmb' -- CMB
  for|item, index| of=d['items']
    for|itemMod, modIndex| of=item.modifies
      option value=`items.${index}.modifies.${modIndex}` -- ${item.name}: ${itemMod.dot}
Section class="Editor__Items" default='open'
  @heading
    span -- Items
  @content
    div.Editor__Items__content
      div.Editor__Items__controls
        button.Editor__Items__controls__button on-click('addItem') -- add item
      div.Editor__Items__items
        for|item, index| of=d['items']
          div.Editor__Items__item
            div.Editor__Items__item__type
              span.Editor__Entry__name -- Type
              select.Editor__Entry__input name='type' on-change('changeItemType', index)
                for|value| of=['armor', 'weapon', 'magic item', 'goods', 'wealth']
                  option value=value selected=item.properties.type===value -- ${value}
            div.Editor__Items__item__name
              span.Editor__Entry__name -- Name
              errorable field=`items.${index}.name`
                input.Editor__Entry__input value=item.name on-change('updateItemField', index, 'name')
            if(item.properties.equipped !== undefined)
              div.Editor__Items__item__equipped
                span.Editor__Entry__name -- Equipped
                  input.Editor__Entry__input type='checkbox' checked=item.properties.equipped on-change('updateItemPropertyField', index, 'equipped')
            if(item.properties.type === 'weapon')
              div.Editor__Items__item__enchantment
                span.Editor__Entry__name -- Enchantment
                errorable field=`items.${index}.properties.enchantment`
                  input.Editor__Entry__input type='number' value=item.properties.enchantment on-change('updateItemPropertyField', index, 'enchantment')
              div.Editor__Items__item__attack
                span.Editor__Entry__name -- Attack
                errorable field=`items.${index}.properties.attack`
                  input.Editor__Entry__input type='number' value=item.properties.attack on-change('updateItemPropertyField', index, 'attack')
              div.Editor__Items__item__damage
                span.Editor__Entry__name -- Damage
                errorable field=`items.${index}.properties.damage`
                  input.Editor__Entry__input value=item.properties.damage on-change('updateItemPropertyField', index, 'damage')
            else-if(item.properties.type === 'armor')
              div.Editor__Items__item__enchantment
                span.Editor__Entry__name -- Enchantment
                errorable field=`items.${index}.properties.enchantment`
                  input.Editor__Entry__input type='number' value=item.properties.enchantment on-change('updateItemPropertyField', index, 'enchantment')
            if(item.properties.equipped !== undefined)
              div.Editor__Items__item__modifiers
                button.Editor__Items__item__modifier__add on-click('addItemModifier', index) -- add modifier
                for|modifier, modIndex| of=item.modifies
                  div.Editor__Items__item__modifier
                    label.Editor__Items__item__modifier__dot
                      span.Editor__Entry__name -- Target
                      errorable field=`items.${index}.modifies.${modIndex}.dot`
                        input.Editor__Entry__input list='item-target-fields' value=modifier.dot on-change('updateItemModifierField', index, modIndex, 'dot')
                    label.Editor__Items__item__modifier__value
                      span.Editor__Entry__name -- Value
                      input.Editor__Entry__input type='number' value=modifier.value size=4 on-change('updateItemModifierField', index, modIndex, 'value')
datalist id='item-target-fields'
  for|key,value| in={str: 'Strength', dex: 'Dexterity', con: 'Constitution', int: 'Intelligence', wis: 'Wisdom', cha: 'Charisma'}
    option value=`ability scores.${key}` -- ${value}
  for|value| of=['fortitude', 'reflex', 'will']
    option value=`saves.${value}` -- ${value[0].toUpperCase()+value.slice(1)}
  option value='hp' -- HP
  option value='attack' -- Attack
  option value='ac' -- AC
  option value='cmb' -- CMB
