// FileView provides and handles the split-view for sheets. From the current file selected, it attempts to acquire the associated Packet and set up various needed structures for updating the packet view and editor components.
import path from 'path'
import dd from 'dot-dotty'
import PacketLink from 'models/PacketLink'
import Config from 'models/_Config.mjs'
import Packets from '../../models/_Packets.mjs'

class {
  onCreate(input) {
    this.state = {
      sheet: null,
    }
    this.onFileUpdate = this.onFileUpdate.bind(this)
    this.link = new PacketLink()

    if (input?.file) {
      this.hookFile(input.file)
    }
  }
  onInput(input) {
    if (input?.file?.id !== this.file?.id) {
      this.hookFile(input.file)
    }
  }
  // hookFiles sets the given file to be the source of updating our editor and view marko sub-components.
  async hookFile(file) {
    if (this.file) {
      this.file.off('change', this.onFileUpdate)
      this.file.off('undo', this.onFileUpdate)
      this.file.off('redo', this.onFileUpdate)
      this.link.destroy()
    }
    if (file) {
      this.file = file
      this.file.on('change', this.onFileUpdate)
      this.file.on('undo', this.onFileUpdate)
      this.file.on('redo', this.onFileUpdate)
      this.dot = dd(this.file, {
        prefix: 'state.',
        throwErrors: false,
        throwTraps: false,
      })
      if (!Config.settings.packetSettings) {
        Config.settings.packetSettings = {}
      }
      this.state.sheet = Packets.findSupportingSheet(file.state.type, file.state.version)
      if (!Config.settings.packetSettings[this.state.sheet.name]) {
        Config.settings.packetSettings[this.state.sheet.name] = []
      }
      this.config = dd(Config.settings.packetSettings[this.state.sheet.name], {
        throwErrors: false,
        throwTraps: false,
      })
      this.checkFile()
      this.link.ready()
    }
  }
  onFileUpdate(e) {
    this.checkFile()
    this.link.refresh()
  }
  checkFile() {
    this.errors = []
    if (this.state?.sheet?.schema) {
      try {
        let errs = this.state.sheet.schema.validate(this.file._state)
        for (let err of errs) {
          this.errors[err.where] = err.message || err.code
        }
      } catch(e) {
        console.log(e)
      }
    }
    this.link.errors(this.errors)
  }
}

style {
  .FileView {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
    grid-template-rows: minmax(0, 1fr);
  }
  .FileView.-single {
    grid-template-columns: minmax(0, 1fr);
  }
  .FileView__Message {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--editor-fg);
  }
}

if(input.file)
  div.FileView
    SheetEditor link=component.link dot=component.dot file=component.file editor=state.sheet?.editor config=component.config
    SheetViewer link=component.link dot=component.dot file=component.file viewer=state.sheet?.viewer config=component.config
else
  div.FileView.-single
    div.FileView__Message
      span -- Open or Create a file.
